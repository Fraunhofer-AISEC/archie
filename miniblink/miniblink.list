
miniblink.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 6d 01 00 08 6b 01 00 08 69 01 00 08     . . m...k...i...
	...
 800002c:	6b 01 00 08 00 00 00 00 00 00 00 00 6b 01 00 08     k...........k...
 800003c:	6b 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     k...i...i...i...
 800004c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 800005c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 800006c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 800007c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 800008c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 800009c:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 80000ac:	69 01 00 08 69 01 00 08 69 01 00 08 69 01 00 08     i...i...i...i...
 80000bc:	69 01 00 08                                         i...

080000c0 <main>:
	/* Using API functions: */
	gpio_mode_setup(PORT_LED, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, PIN_LED);
}

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_GPIOC);
 80000c2:	480b      	ldr	r0, [pc, #44]	; (80000f0 <main+0x30>)
 80000c4:	f000 f842 	bl	800014c <rcc_periph_clock_enable>
	gpio_mode_setup(PORT_LED, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, PIN_LED);
 80000c8:	2380      	movs	r3, #128	; 0x80
 80000ca:	2200      	movs	r2, #0
 80000cc:	2101      	movs	r1, #1
		// gpio_clear(PORT_LED, PIN_LED);	/* LED on */
		// for (i = 0; i < 1000000; i++)	/* Wait a bit. */
		//	__asm__("nop");

		/* Using API function gpio_toggle(): */
		gpio_toggle(PORT_LED, PIN_LED);	/* LED on/off */
 80000ce:	2480      	movs	r4, #128	; 0x80
	gpio_mode_setup(PORT_LED, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, PIN_LED);
 80000d0:	4808      	ldr	r0, [pc, #32]	; (80000f4 <main+0x34>)
 80000d2:	005b      	lsls	r3, r3, #1
 80000d4:	f000 f81a 	bl	800010c <gpio_mode_setup>
		gpio_toggle(PORT_LED, PIN_LED);	/* LED on/off */
 80000d8:	0064      	lsls	r4, r4, #1
 80000da:	0021      	movs	r1, r4
 80000dc:	4805      	ldr	r0, [pc, #20]	; (80000f4 <main+0x34>)
 80000de:	f000 f80d 	bl	80000fc <gpio_toggle>
 80000e2:	4b05      	ldr	r3, [pc, #20]	; (80000f8 <main+0x38>)
		for (i = 0; i < 1000000; i++) {	/* Wait a bit. */
			__asm__("nop");
 80000e4:	46c0      	nop			; (mov r8, r8)
		for (i = 0; i < 1000000; i++) {	/* Wait a bit. */
 80000e6:	3b01      	subs	r3, #1
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d1fb      	bne.n	80000e4 <main+0x24>
 80000ec:	e7f5      	b.n	80000da <main+0x1a>
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000293 	.word	0x00000293
 80000f4:	48000800 	.word	0x48000800
 80000f8:	000f4240 	.word	0x000f4240

080000fc <gpio_toggle>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	uint32_t port = GPIO_ODR(gpioport);
 80000fc:	6942      	ldr	r2, [r0, #20]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 80000fe:	0013      	movs	r3, r2
 8000100:	400b      	ands	r3, r1
 8000102:	041b      	lsls	r3, r3, #16
 8000104:	4391      	bics	r1, r2
 8000106:	4319      	orrs	r1, r3
 8000108:	6181      	str	r1, [r0, #24]
}
 800010a:	4770      	bx	lr

0800010c <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 800010c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800010e:	b085      	sub	sp, #20
 8000110:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000112:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000114:	2100      	movs	r1, #0
{
 8000116:	9202      	str	r2, [sp, #8]
 8000118:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 800011a:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 800011c:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 800011e:	9c03      	ldr	r4, [sp, #12]
 8000120:	2501      	movs	r5, #1
 8000122:	410c      	asrs	r4, r1
 8000124:	422c      	tst	r4, r5
 8000126:	d00a      	beq.n	800013e <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000128:	003d      	movs	r5, r7
 800012a:	004c      	lsls	r4, r1, #1
 800012c:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 800012e:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000130:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000132:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000134:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8000136:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000138:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 800013a:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 800013c:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 800013e:	3101      	adds	r1, #1
 8000140:	2910      	cmp	r1, #16
 8000142:	d1ec      	bne.n	800011e <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000144:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000146:	60c3      	str	r3, [r0, #12]
}
 8000148:	b005      	add	sp, #20
 800014a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800014c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800014c:	4b05      	ldr	r3, [pc, #20]	; (8000164 <rcc_periph_clock_enable+0x18>)
 800014e:	0942      	lsrs	r2, r0, #5
 8000150:	18d2      	adds	r2, r2, r3
 8000152:	231f      	movs	r3, #31
 8000154:	4018      	ands	r0, r3
 8000156:	3b1e      	subs	r3, #30
 8000158:	4083      	lsls	r3, r0
 800015a:	6811      	ldr	r1, [r2, #0]
 800015c:	430b      	orrs	r3, r1
 800015e:	6013      	str	r3, [r2, #0]
}
 8000160:	4770      	bx	lr
 8000162:	46c0      	nop			; (mov r8, r8)
 8000164:	40021000 	.word	0x40021000

08000168 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8000168:	e7fe      	b.n	8000168 <blocking_handler>

0800016a <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800016a:	4770      	bx	lr

0800016c <reset_handler>:
{
 800016c:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800016e:	4b16      	ldr	r3, [pc, #88]	; (80001c8 <reset_handler+0x5c>)
 8000170:	4a16      	ldr	r2, [pc, #88]	; (80001cc <reset_handler+0x60>)
 8000172:	4917      	ldr	r1, [pc, #92]	; (80001d0 <reset_handler+0x64>)
 8000174:	428b      	cmp	r3, r1
 8000176:	d318      	bcc.n	80001aa <reset_handler+0x3e>
		*dest++ = 0;
 8000178:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800017a:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <reset_handler+0x68>)
 800017c:	4293      	cmp	r3, r2
 800017e:	d317      	bcc.n	80001b0 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000180:	2380      	movs	r3, #128	; 0x80
 8000182:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <reset_handler+0x6c>)
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000188:	4c14      	ldr	r4, [pc, #80]	; (80001dc <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800018a:	430b      	orrs	r3, r1
 800018c:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800018e:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <reset_handler+0x74>)
 8000190:	429c      	cmp	r4, r3
 8000192:	d30f      	bcc.n	80001b4 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000194:	4c13      	ldr	r4, [pc, #76]	; (80001e4 <reset_handler+0x78>)
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <reset_handler+0x7c>)
 8000198:	429c      	cmp	r4, r3
 800019a:	d30e      	bcc.n	80001ba <reset_handler+0x4e>
	(void)main();
 800019c:	f7ff ff90 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80001a0:	4c12      	ldr	r4, [pc, #72]	; (80001ec <reset_handler+0x80>)
 80001a2:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <reset_handler+0x84>)
 80001a4:	429c      	cmp	r4, r3
 80001a6:	d30b      	bcc.n	80001c0 <reset_handler+0x54>
}
 80001a8:	bd10      	pop	{r4, pc}
		*dest = *src;
 80001aa:	ca01      	ldmia	r2!, {r0}
 80001ac:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 80001ae:	e7e1      	b.n	8000174 <reset_handler+0x8>
		*dest++ = 0;
 80001b0:	c302      	stmia	r3!, {r1}
 80001b2:	e7e3      	b.n	800017c <reset_handler+0x10>
		(*fp)();
 80001b4:	cc08      	ldmia	r4!, {r3}
 80001b6:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80001b8:	e7e9      	b.n	800018e <reset_handler+0x22>
		(*fp)();
 80001ba:	cc08      	ldmia	r4!, {r3}
 80001bc:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80001be:	e7ea      	b.n	8000196 <reset_handler+0x2a>
		(*fp)();
 80001c0:	cc08      	ldmia	r4!, {r3}
 80001c2:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80001c4:	e7ed      	b.n	80001a2 <reset_handler+0x36>
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	20000000 	.word	0x20000000
 80001cc:	080001f4 	.word	0x080001f4
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000000 	.word	0x20000000
 80001d8:	e000ed14 	.word	0xe000ed14
 80001dc:	080001f4 	.word	0x080001f4
 80001e0:	080001f4 	.word	0x080001f4
 80001e4:	080001f4 	.word	0x080001f4
 80001e8:	080001f4 	.word	0x080001f4
 80001ec:	080001f4 	.word	0x080001f4
 80001f0:	080001f4 	.word	0x080001f4
